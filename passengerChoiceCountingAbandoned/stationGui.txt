-- local gameApiUtils = require "gameApiUtils"
-- local passengerChoice = require "passengerChoice"
-- local luaUtils = require "luaUtils"
-- local lineGui = require "lineGui"
-- local uiUtil = require "uiUtil"
-- local stationsHelper = require "stationsHelper"


-- local stationGui = {}

-- local stationWindows = {}
-- local stationTables = {}

-- local gameYearLen = 730

-- function stationGui.createGui(stationId, state)
--     local start_time = os.clock()


--     local stnIdStr =  tostring(stationId)
--     -- print("Station " .. stnIdStr)
--     local stnGuiId = "lineInfo.stnUi.floatingLayout." .. stnIdStr


--     if stationWindows[stationId] then
--       stationGui.fillTable(stationId, stationTables[stationId], state)
--       stationWindows[stationId]:setVisible(true, true)
--       return
--     end

--     local stnFloatLayout = api.gui.layout.FloatingLayout.new(0,1)
--     stnFloatLayout:setId(stnGuiId)
--     stnFloatLayout:setGravity(-1,-1)

--     local stationTable = stationGui.createTable()
--     local stationScrollArea = stationGui.createStationsArea(stnIdStr, stationTable)
--     stnFloatLayout:addItem(stationScrollArea,0,0)

--     stationGui.fillTable(stationId, stationTable, state)

--     local stnName = gameApiUtils.getEntityName(stationId)
--     local stnWindow =  uiUtil.createWindow("Apx. Demand at Station: " .. stnName, stnFloatLayout, 800, 400, false)
--     stnWindow:setId("lineInfo.stnUi.stnWindow."  .. stnIdStr)
--     stnWindow:setPosition(200,400)

--     stationWindows[stationId] = stnWindow
--     stationTables[stationId] = stationTable
--     print(string.format("stationGui.createGui. Elapsed time: %.4f", os.clock() - start_time))
-- end

-- function stationGui.createStationsArea(stnIdStr, stationTable)
--     local stationScrollArea = api.gui.comp.ScrollArea.new(stationTable, "lineInfo.stnUi.stationScrollArea".. stnIdStr)
--     stationScrollArea:setMinimumSize(api.gui.util.Size.new(800, 380))
--     stationScrollArea:setMaximumSize(api.gui.util.Size.new(800, 380))
--     return stationScrollArea
-- end

-- function stationGui.createTable()
--     local stationTable = api.gui.comp.Table.new(8, 'SINGLE')
--     stationTable:setColWidth(0,200)
--     stationTable:setColWidth(1,50)
--     stationTable:setColWidth(2,200)
--     stationTable:setColWidth(3,60)
--     stationTable:setColWidth(4,60)
--     stationTable:setColWidth(5,60)
--     stationTable:setColWidth(6,60)
--     stationTable:setColWidth(7,60)
--     return stationTable
-- end

-- function stationGui.getDateIfNil(state, bucketNo)
--     if state.startDate[bucketNo] == nil then
--        return "N/A" 
--     else
--         return state.startDate[bucketNo]
--     end
-- end

-- function stationGui.fillTable(stationId, stationTable, state)
--     -- Clear the table
--     stationTable:deleteAll()
    
--     local curBucket = math.floor(state.lastUpdated/gameYearLen)

--     local date1 = stationGui.getDateIfNil(state, curBucket)
--     local date2 = stationGui.getDateIfNil(state, curBucket -1)
--     local date3 = stationGui.getDateIfNil(state, curBucket -2)
--     local date4 = stationGui.getDateIfNil(state, curBucket -3)


--     local header1 = uiUtil.txt("Line")
--     local header2 = uiUtil.txt("Stop")
--     local header3 = uiUtil.txt("Via")
--     -- local header4 = uiUtil.txt("0-15m")
--     -- local header5 = uiUtil.txt("15-30m")
--     -- local header6 = uiUtil.txt("30-45m")
--     -- local header7 = uiUtil.txt("45-60m")
--     local header4 = uiUtil.txt(date4)
--     local header5 = uiUtil.txt(date3)
--     local header6 = uiUtil.txt(date2)
--     local header7 = uiUtil.txt(date1)
--     local header8 = uiUtil.txt("Total")
--     stationTable:setHeader({header1,header2, header3, header4, header5, header6,header7, header8})


--     local data = passengerChoice.compute(stationId, state)
--     local total15 = 0
--     local total30 = 0
--     local total45 = 0
--     local total60 = 0

--     local toSort = {}
--     for _, entry in pairs(data) do
--         if gameApiUtils.entityExists(entry.lineId) then
--             -- line Name
--             local lineName = gameApiUtils.getEntityName(entry.lineId)
--             local shortenedLineName = luaUtils.shortenToPixels(lineName, 200)
--             entry.lineName = lineName
--             table.insert(toSort, entry)

--             -- Next Station
--             local stationsList = stationsHelper.getAllStations(entry.lineId)
--             local nextStopIdx = stationsHelper.getNextStopFromStns(entry.stopNo, #stationsList)
--             local nextStation = stationsHelper.getStationNameWithId(stationsList[nextStopIdx])

--             -- Counts
--             local count15 = entry.counts[1] or 0
--             local count30 = entry.counts[2] or 0
--             local count45 = entry.counts[3] or 0
--             local count60 = entry.counts[4] or 0

--             total15 = total15 + count15
--             total30 = total30 + count30
--             total45 = total45 + count45
--             total60 = total60 + count60
            
--             local rowTotal = count15+ count30 + count45 + count60

--             local lineBtn = lineGui.createLineButton(entry.lineId, shortenedLineName)
--             local stopText = uiUtil.txt(entry.stopNo)
--             local lblNextStn = uiUtil.makeLocateText(nextStation.id, luaUtils.shortenName(nextStation.name, 30))
--             local count15Text = uiUtil.txt(count15)
--             local count30Text = uiUtil.txt(count30)
--             local count45Text = uiUtil.txt(count45)
--             local count60Text = uiUtil.txt(count60)
--             local totalText = uiUtil.txt(rowTotal)

--             stationTable:addRow({lineBtn, stopText, lblNextStn, count60Text,count45Text,count30Text,  count15Text, totalText})
--         end
--     end

--     -- Sort by line name
--     local order = luaUtils.getOrderOfArray(toSort, function(a,b)
--         return a.value.lineName < b.value.lineName
--     end)
--     stationTable:setOrder(order)

--     -- total row
--     local allTotal = total15 + total30 + total45 + total60
--     stationTable:addRow({uiUtil.txt("TOTAL"), uiUtil.txt(""), uiUtil.txt(""),uiUtil.txt(total60), uiUtil.txt(total45),  uiUtil.txt(total30), uiUtil.txt(total15), uiUtil.txt(allTotal)})
-- end



-- -- Add a refresh data button

-- -- Need state. Can store in stationGui
-- -- function stationGui.createStationAndLocateButton(stationId, btnName)
-- --     local stationBtn = uiUtil.createButton(btnName)
-- --     local function openLine()
-- --         stationGui.createGui(stationId)
-- --     end

-- --     lineBtn:onClick(function ()
-- --         local success, err = pcall(openLine)
-- --         if err then
-- --             print(err)
-- --         end
-- --     end)

-- --     return lineBtn
-- -- end

-- return stationGui